// Generated by Haxe 4.0.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Example = function() { };
Example.__name__ = true;
Example.main = function() {
	var bytes = haxe_Resource.getBytes("font");
	var ttfGlyphs = new truetype_TTFGlyphs(bytes);
	var map = truetype_GlyphTools.createGlyphMap(10,12,ttfGlyphs);
	var jsonStr = truetype_GlyphTools.glyphMapToJson(map);
	console.log("src/Example.hx:26:",jsonStr);
	var map2 = truetype_GlyphTools.glyphMapFromJson(jsonStr);
	console.log("src/Example.hx:28:",map2);
	console.log("src/Example.hx:30:",Std.string(map) == Std.string(map2));
	var scale = 3;
	var translateY = -1000;
	var _g = 9;
	while(_g < 512) {
		var index = _g++;
		if(!ttfGlyphs.isGlyphSimple(index)) {
			continue;
		}
		var canvas = truetype_Glyph2Canvas.getGlyphCanvas(ttfGlyphs,index,scale,translateY,null,false);
		window.document.body.appendChild(canvas);
		var svg = truetype_Glyph2SVG.getGlyphSvg(ttfGlyphs,index,scale,translateY);
		var div = window.document.createElement("div");
		div.innerHTML = haxe_xml_Printer.print(svg);
		var svgElement = div.firstChild;
		window.document.body.appendChild(svgElement);
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var _$Xml_XmlType_$Impl_$ = {};
_$Xml_XmlType_$Impl_$.__name__ = true;
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = true;
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeName = name;
	return xml;
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.attributeMap.keys();
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
};
var format_ttf_TableId = function() { };
format_ttf_TableId.__name__ = true;
var format_ttf_CFlag = function() { };
format_ttf_CFlag.__name__ = true;
var format_ttf_MacGlyphNames = function() { };
format_ttf_MacGlyphNames.__name__ = true;
var format_ttf__$Data_Header_$_$Impl_$ = {};
format_ttf__$Data_Header_$_$Impl_$.__name__ = true;
format_ttf__$Data_Header_$_$Impl_$._new = function(header) {
	var this1 = header;
	return this1;
};
format_ttf__$Data_Header_$_$Impl_$.fromInput = function(input) {
	var this1 = { majorVersion : input.readUInt16(), minorVersion : input.readUInt16(), numTables : input.readUInt16(), searchRange : input.readUInt16(), entrySelector : input.readUInt16(), rangeShift : input.readUInt16()};
	return this1;
};
format_ttf__$Data_Header_$_$Impl_$.write = function(this1,output) {
	output.writeUInt16(this1.majorVersion);
	output.writeUInt16(this1.minorVersion);
	output.writeUInt16(this1.numTables);
	output.writeUInt16(this1.searchRange);
	output.writeUInt16(this1.entrySelector);
	output.writeUInt16(this1.rangeShift);
	return output;
};
var format_ttf_Table = $hxEnums["format.ttf.Table"] = { __ename__ : true, __constructs__ : ["TGlyf","THmtx","TCmap","TKern","TName","THead","THhea","TLoca","TMaxp","TPost","TOS2","TUnkn"]
	,TGlyf: ($_=function(descriptions) { return {_hx_index:0,descriptions:descriptions,__enum__:"format.ttf.Table",toString:$estr}; },$_.__params__ = ["descriptions"],$_)
	,THmtx: ($_=function(metrics) { return {_hx_index:1,metrics:metrics,__enum__:"format.ttf.Table",toString:$estr}; },$_.__params__ = ["metrics"],$_)
	,TCmap: ($_=function(subtables) { return {_hx_index:2,subtables:subtables,__enum__:"format.ttf.Table",toString:$estr}; },$_.__params__ = ["subtables"],$_)
	,TKern: ($_=function(kerning) { return {_hx_index:3,kerning:kerning,__enum__:"format.ttf.Table",toString:$estr}; },$_.__params__ = ["kerning"],$_)
	,TName: ($_=function(records) { return {_hx_index:4,records:records,__enum__:"format.ttf.Table",toString:$estr}; },$_.__params__ = ["records"],$_)
	,THead: ($_=function(data) { return {_hx_index:5,data:data,__enum__:"format.ttf.Table",toString:$estr}; },$_.__params__ = ["data"],$_)
	,THhea: ($_=function(data) { return {_hx_index:6,data:data,__enum__:"format.ttf.Table",toString:$estr}; },$_.__params__ = ["data"],$_)
	,TLoca: ($_=function(data) { return {_hx_index:7,data:data,__enum__:"format.ttf.Table",toString:$estr}; },$_.__params__ = ["data"],$_)
	,TMaxp: ($_=function(data) { return {_hx_index:8,data:data,__enum__:"format.ttf.Table",toString:$estr}; },$_.__params__ = ["data"],$_)
	,TPost: ($_=function(data) { return {_hx_index:9,data:data,__enum__:"format.ttf.Table",toString:$estr}; },$_.__params__ = ["data"],$_)
	,TOS2: ($_=function(data) { return {_hx_index:10,data:data,__enum__:"format.ttf.Table",toString:$estr}; },$_.__params__ = ["data"],$_)
	,TUnkn: ($_=function(bytes) { return {_hx_index:11,bytes:bytes,__enum__:"format.ttf.Table",toString:$estr}; },$_.__params__ = ["bytes"],$_)
};
var format_ttf_GlyfDescription = $hxEnums["format.ttf.GlyfDescription"] = { __ename__ : true, __constructs__ : ["TGlyphSimple","TGlyphComposite","TGlyphNull"]
	,TGlyphSimple: ($_=function(header,data) { return {_hx_index:0,header:header,data:data,__enum__:"format.ttf.GlyfDescription",toString:$estr}; },$_.__params__ = ["header","data"],$_)
	,TGlyphComposite: ($_=function(header,components) { return {_hx_index:1,header:header,components:components,__enum__:"format.ttf.GlyfDescription",toString:$estr}; },$_.__params__ = ["header","components"],$_)
	,TGlyphNull: {_hx_index:2,__enum__:"format.ttf.GlyfDescription",toString:$estr}
};
var format_ttf_Transform = $hxEnums["format.ttf.Transform"] = { __ename__ : true, __constructs__ : ["Transform1","Transform2","Transform3"]
	,Transform1: ($_=function(scale) { return {_hx_index:0,scale:scale,__enum__:"format.ttf.Transform",toString:$estr}; },$_.__params__ = ["scale"],$_)
	,Transform2: ($_=function(xscale,yscale) { return {_hx_index:1,xscale:xscale,yscale:yscale,__enum__:"format.ttf.Transform",toString:$estr}; },$_.__params__ = ["xscale","yscale"],$_)
	,Transform3: ($_=function(xscale,yscale,scale01,scale10) { return {_hx_index:2,xscale:xscale,yscale:yscale,scale01:scale01,scale10:scale10,__enum__:"format.ttf.Transform",toString:$estr}; },$_.__params__ = ["xscale","yscale","scale01","scale10"],$_)
};
var format_ttf_CmapSubTable = $hxEnums["format.ttf.CmapSubTable"] = { __ename__ : true, __constructs__ : ["Cmap0","Cmap2","Cmap4","Cmap6","Cmap8","Cmap10","Cmap12","CmapUnk"]
	,Cmap0: ($_=function(header,glyphIndexArray) { return {_hx_index:0,header:header,glyphIndexArray:glyphIndexArray,__enum__:"format.ttf.CmapSubTable",toString:$estr}; },$_.__params__ = ["header","glyphIndexArray"],$_)
	,Cmap2: ($_=function(header,glyphIndexArray,subHeaderKeys,subHeaders) { return {_hx_index:1,header:header,glyphIndexArray:glyphIndexArray,subHeaderKeys:subHeaderKeys,subHeaders:subHeaders,__enum__:"format.ttf.CmapSubTable",toString:$estr}; },$_.__params__ = ["header","glyphIndexArray","subHeaderKeys","subHeaders"],$_)
	,Cmap4: ($_=function(header,glyphIndexArray) { return {_hx_index:2,header:header,glyphIndexArray:glyphIndexArray,__enum__:"format.ttf.CmapSubTable",toString:$estr}; },$_.__params__ = ["header","glyphIndexArray"],$_)
	,Cmap6: ($_=function(header,glyphIndexArray,firstCode) { return {_hx_index:3,header:header,glyphIndexArray:glyphIndexArray,firstCode:firstCode,__enum__:"format.ttf.CmapSubTable",toString:$estr}; },$_.__params__ = ["header","glyphIndexArray","firstCode"],$_)
	,Cmap8: ($_=function(header,groups,is32) { return {_hx_index:4,header:header,groups:groups,is32:is32,__enum__:"format.ttf.CmapSubTable",toString:$estr}; },$_.__params__ = ["header","groups","is32"],$_)
	,Cmap10: ($_=function(header,glyphIndexArray,startCharCode,numChars) { return {_hx_index:5,header:header,glyphIndexArray:glyphIndexArray,startCharCode:startCharCode,numChars:numChars,__enum__:"format.ttf.CmapSubTable",toString:$estr}; },$_.__params__ = ["header","glyphIndexArray","startCharCode","numChars"],$_)
	,Cmap12: ($_=function(header,groups) { return {_hx_index:6,header:header,groups:groups,__enum__:"format.ttf.CmapSubTable",toString:$estr}; },$_.__params__ = ["header","groups"],$_)
	,CmapUnk: ($_=function(header,bytes) { return {_hx_index:7,header:header,bytes:bytes,__enum__:"format.ttf.CmapSubTable",toString:$estr}; },$_.__params__ = ["header","bytes"],$_)
};
var format_ttf_KernSubTable = $hxEnums["format.ttf.KernSubTable"] = { __ename__ : true, __constructs__ : ["KernSub0","KernSub1"]
	,KernSub0: ($_=function(kerningPairs) { return {_hx_index:0,kerningPairs:kerningPairs,__enum__:"format.ttf.KernSubTable",toString:$estr}; },$_.__params__ = ["kerningPairs"],$_)
	,KernSub1: ($_=function(array) { return {_hx_index:1,array:array,__enum__:"format.ttf.KernSubTable",toString:$estr}; },$_.__params__ = ["array"],$_)
};
var format_ttf__$Data_HeadData_$_$Impl_$ = {};
format_ttf__$Data_HeadData_$_$Impl_$.__name__ = true;
format_ttf__$Data_HeadData_$_$Impl_$._new = function(headData) {
	var this1 = headData;
	return this1;
};
format_ttf__$Data_HeadData_$_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		throw new js__$Boot_HaxeError("no head table found");
	}
	var i = new haxe_io_BytesInput(bytes);
	i.set_bigEndian(true);
	var this1 = { version : i.readInt32(), fontRevision : i.readInt32(), checkSumAdjustment : i.readInt32(), magicNumber : i.readInt32(), flags : i.readUInt16(), unitsPerEm : i.readUInt16(), created : i.readDouble(), modified : i.readDouble(), xMin : i.readInt16(), yMin : i.readInt16(), xMax : i.readInt16(), yMax : i.readInt16(), macStyle : i.readUInt16(), lowestRecPPEM : i.readUInt16(), fontDirectionHint : i.readInt16(), indexToLocFormat : i.readInt16(), glyphDataFormat : i.readInt16()};
	return this1;
};
format_ttf__$Data_HeadData_$_$Impl_$.write = function(this1,o) {
	o.writeInt32(this1.version);
	o.writeInt32(this1.fontRevision);
	o.writeInt32(this1.checkSumAdjustment);
	o.writeInt32(this1.magicNumber);
	o.writeUInt16(this1.flags);
	o.writeUInt16(this1.unitsPerEm);
	o.writeDouble(this1.created);
	o.writeDouble(this1.modified);
	o.writeInt16(this1.xMin);
	o.writeInt16(this1.yMin);
	o.writeInt16(this1.xMax);
	o.writeInt16(this1.yMax);
	o.writeUInt16(this1.macStyle);
	o.writeUInt16(this1.lowestRecPPEM);
	o.writeInt16(this1.fontDirectionHint);
	o.writeInt16(this1.indexToLocFormat);
	o.writeInt16(this1.glyphDataFormat);
	return o;
};
var format_ttf__$Data_HheaData_$_$Impl_$ = {};
format_ttf__$Data_HheaData_$_$Impl_$.__name__ = true;
format_ttf__$Data_HheaData_$_$Impl_$._new = function(hheaData) {
	var this1 = hheaData;
	return this1;
};
format_ttf__$Data_HheaData_$_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		throw new js__$Boot_HaxeError("no hhea table found");
	}
	var i = new haxe_io_BytesInput(bytes);
	i.set_bigEndian(true);
	var this1 = { version : i.readInt32(), ascender : i.readInt16(), descender : i.readInt16(), lineGap : i.readInt16(), advanceWidthMax : i.readUInt16(), minLeftSideBearing : i.readInt16(), minRightSideBearing : i.readInt16(), xMaxExtent : i.readInt16(), caretSlopeRise : i.readInt16(), caretSlopeRun : i.readInt16(), caretOffset : i.readInt16(), reserved : i.read(8), metricDataFormat : i.readInt16(), numberOfHMetrics : i.readUInt16()};
	return this1;
};
format_ttf__$Data_HheaData_$_$Impl_$.write = function(this1,o) {
	o.writeInt32(this1.version);
	o.writeInt16(this1.ascender);
	o.writeInt16(this1.descender);
	o.writeInt16(this1.lineGap);
	o.writeUInt16(this1.advanceWidthMax);
	o.writeInt16(this1.minLeftSideBearing);
	o.writeInt16(this1.minRightSideBearing);
	o.writeInt16(this1.xMaxExtent);
	o.writeInt16(this1.caretSlopeRise);
	o.writeInt16(this1.caretSlopeRun);
	o.writeInt16(this1.caretOffset);
	o.write(this1.reserved);
	o.writeInt16(this1.metricDataFormat);
	o.writeInt16(this1.numberOfHMetrics);
	return o;
};
var format_ttf__$Data_MaxpData_$_$Impl_$ = {};
format_ttf__$Data_MaxpData_$_$Impl_$.__name__ = true;
format_ttf__$Data_MaxpData_$_$Impl_$._new = function(maxpData) {
	var this1 = maxpData;
	return this1;
};
format_ttf__$Data_MaxpData_$_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		throw new js__$Boot_HaxeError("no maxp table found");
	}
	var i = new haxe_io_BytesInput(bytes);
	i.set_bigEndian(true);
	var this1 = { versionNumber : i.readInt32(), numGlyphs : i.readUInt16(), maxPoints : i.readUInt16(), maxContours : i.readUInt16(), maxComponentPoints : i.readUInt16(), maxComponentContours : i.readUInt16(), maxZones : i.readUInt16(), maxTwilightPoints : i.readUInt16(), maxStorage : i.readUInt16(), maxFunctionDefs : i.readUInt16(), maxInstructionDefs : i.readUInt16(), maxStackElements : i.readUInt16(), maxSizeOfInstructions : i.readUInt16(), maxComponentElements : i.readUInt16(), maxComponentDepth : i.readUInt16()};
	return this1;
};
format_ttf__$Data_MaxpData_$_$Impl_$.write = function(this1,o) {
	o.writeInt32(this1.versionNumber);
	o.writeInt16(this1.numGlyphs);
	o.writeInt16(this1.maxPoints);
	o.writeInt16(this1.maxContours);
	o.writeInt16(this1.maxComponentPoints);
	o.writeInt16(this1.maxComponentContours);
	o.writeInt16(this1.maxZones);
	o.writeInt16(this1.maxTwilightPoints);
	o.writeInt16(this1.maxStorage);
	o.writeInt16(this1.maxFunctionDefs);
	o.writeInt16(this1.maxInstructionDefs);
	o.writeInt16(this1.maxStackElements);
	o.writeInt16(this1.maxSizeOfInstructions);
	o.writeInt16(this1.maxComponentElements);
	o.writeInt16(this1.maxComponentDepth);
	return o;
};
var format_ttf__$Data_OS2Data_$_$Impl_$ = {};
format_ttf__$Data_OS2Data_$_$Impl_$.__name__ = true;
format_ttf__$Data_OS2Data_$_$Impl_$._new = function(oS2Data) {
	var this1 = oS2Data;
	return this1;
};
format_ttf__$Data_OS2Data_$_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		throw new js__$Boot_HaxeError("no maxp table found");
	}
	var i = new haxe_io_BytesInput(bytes);
	i.set_bigEndian(true);
	var this1 = { version : i.readUInt16(), xAvgCharWidth : i.readInt16(), usWeightClass : i.readUInt16(), usWidthClass : i.readUInt16(), fsType : i.readInt16(), ySubscriptXSize : i.readInt16(), ySubscriptYSize : i.readInt16(), ySubscriptXOffset : i.readInt16(), ySubscriptYOffset : i.readInt16(), ySuperscriptXSize : i.readInt16(), ySuperscriptYSize : i.readInt16(), ySuperscriptXOffset : i.readInt16(), ySuperscriptYOffset : i.readInt16(), yStrikeoutSize : i.readInt16(), yStrikeoutPosition : i.readInt16(), sFamilyClass : i.readInt16(), bFamilyType : i.readByte(), bSerifStyle : i.readByte(), bWeight : i.readByte(), bProportion : i.readByte(), bContrast : i.readByte(), bStrokeVariation : i.readByte(), bArmStyle : i.readByte(), bLetterform : i.readByte(), bMidline : i.readByte(), bXHeight : i.readByte(), ulUnicodeRange1 : i.readInt32(), ulUnicodeRange2 : i.readInt32(), ulUnicodeRange3 : i.readInt32(), ulUnicodeRange4 : i.readInt32(), achVendorID : i.readInt32(), fsSelection : i.readInt16(), usFirstCharIndex : i.readUInt16(), usLastCharIndex : i.readUInt16(), sTypoAscender : i.readInt16(), sTypoDescender : i.readInt16(), sTypoLineGap : i.readInt16(), usWinAscent : i.readUInt16(), usWinDescent : i.readUInt16()};
	return this1;
};
format_ttf__$Data_OS2Data_$_$Impl_$.write = function(this1,o) {
	o.writeInt16(this1.version);
	o.writeInt16(this1.xAvgCharWidth);
	o.writeInt16(this1.usWeightClass);
	o.writeInt16(this1.usWidthClass);
	o.writeInt16(this1.fsType);
	o.writeInt16(this1.ySubscriptXSize);
	o.writeInt16(this1.ySubscriptYSize);
	o.writeInt16(this1.ySubscriptXOffset);
	o.writeInt16(this1.ySubscriptYOffset);
	o.writeInt16(this1.ySuperscriptXSize);
	o.writeInt16(this1.ySuperscriptYSize);
	o.writeInt16(this1.ySuperscriptXOffset);
	o.writeInt16(this1.ySuperscriptYOffset);
	o.writeInt16(this1.yStrikeoutSize);
	o.writeInt16(this1.yStrikeoutPosition);
	o.writeInt16(this1.sFamilyClass);
	o.writeByte(this1.bFamilyType);
	o.writeByte(this1.bSerifStyle);
	o.writeByte(this1.bWeight);
	o.writeByte(this1.bProportion);
	o.writeByte(this1.bContrast);
	o.writeByte(this1.bStrokeVariation);
	o.writeByte(this1.bArmStyle);
	o.writeByte(this1.bLetterform);
	o.writeByte(this1.bMidline);
	o.writeByte(this1.bXHeight);
	o.writeInt32(this1.ulUnicodeRange1);
	o.writeInt32(this1.ulUnicodeRange2);
	o.writeInt32(this1.ulUnicodeRange3);
	o.writeInt32(this1.ulUnicodeRange4);
	o.writeInt32(this1.achVendorID);
	o.writeInt16(this1.fsSelection);
	o.writeUInt16(this1.usFirstCharIndex);
	o.writeUInt16(this1.usLastCharIndex);
	o.writeInt16(this1.sTypoAscender);
	o.writeInt16(this1.sTypoDescender);
	o.writeInt16(this1.sTypoLineGap);
	o.writeUInt16(this1.usWinAscent);
	o.writeUInt16(this1.usWinDescent);
	return o;
};
var format_ttf_Reader = function(i) {
	this.input = i;
	this.input.set_bigEndian(true);
};
format_ttf_Reader.__name__ = true;
format_ttf_Reader.prototype = {
	read: function() {
		var input = this.input;
		var this1 = { majorVersion : input.readUInt16(), minorVersion : input.readUInt16(), numTables : input.readUInt16(), searchRange : input.readUInt16(), entrySelector : input.readUInt16(), rangeShift : input.readUInt16()};
		var header = this1;
		var directory = this.readDirectory(header);
		var _this = this.tablesHash;
		var bytes = __map_reserved["hhea"] != null ? _this.getReserved("hhea") : _this.h["hhea"];
		if(bytes == null) {
			throw new js__$Boot_HaxeError("no hhea table found");
		}
		var i = new haxe_io_BytesInput(bytes);
		i.set_bigEndian(true);
		var this2 = { version : i.readInt32(), ascender : i.readInt16(), descender : i.readInt16(), lineGap : i.readInt16(), advanceWidthMax : i.readUInt16(), minLeftSideBearing : i.readInt16(), minRightSideBearing : i.readInt16(), xMaxExtent : i.readInt16(), caretSlopeRise : i.readInt16(), caretSlopeRun : i.readInt16(), caretOffset : i.readInt16(), reserved : i.read(8), metricDataFormat : i.readInt16(), numberOfHMetrics : i.readUInt16()};
		var hheaData = this2;
		var _this1 = this.tablesHash;
		var bytes1 = __map_reserved["head"] != null ? _this1.getReserved("head") : _this1.h["head"];
		if(bytes1 == null) {
			throw new js__$Boot_HaxeError("no head table found");
		}
		var i1 = new haxe_io_BytesInput(bytes1);
		i1.set_bigEndian(true);
		var this3 = { version : i1.readInt32(), fontRevision : i1.readInt32(), checkSumAdjustment : i1.readInt32(), magicNumber : i1.readInt32(), flags : i1.readUInt16(), unitsPerEm : i1.readUInt16(), created : i1.readDouble(), modified : i1.readDouble(), xMin : i1.readInt16(), yMin : i1.readInt16(), xMax : i1.readInt16(), yMax : i1.readInt16(), macStyle : i1.readUInt16(), lowestRecPPEM : i1.readUInt16(), fontDirectionHint : i1.readInt16(), indexToLocFormat : i1.readInt16(), glyphDataFormat : i1.readInt16()};
		var headData = this3;
		var _this2 = this.tablesHash;
		var bytes2 = __map_reserved["maxp"] != null ? _this2.getReserved("maxp") : _this2.h["maxp"];
		if(bytes2 == null) {
			throw new js__$Boot_HaxeError("no maxp table found");
		}
		var i2 = new haxe_io_BytesInput(bytes2);
		i2.set_bigEndian(true);
		var this4 = { versionNumber : i2.readInt32(), numGlyphs : i2.readUInt16(), maxPoints : i2.readUInt16(), maxContours : i2.readUInt16(), maxComponentPoints : i2.readUInt16(), maxComponentContours : i2.readUInt16(), maxZones : i2.readUInt16(), maxTwilightPoints : i2.readUInt16(), maxStorage : i2.readUInt16(), maxFunctionDefs : i2.readUInt16(), maxInstructionDefs : i2.readUInt16(), maxStackElements : i2.readUInt16(), maxSizeOfInstructions : i2.readUInt16(), maxComponentElements : i2.readUInt16(), maxComponentDepth : i2.readUInt16()};
		var maxpData = this4;
		var _this3 = this.tablesHash;
		var locaData = this.readLocaTable(__map_reserved["loca"] != null ? _this3.getReserved("loca") : _this3.h["loca"],headData,maxpData);
		var _this4 = this.tablesHash;
		var hmtxData = this.readHmtxTable(__map_reserved["hmtx"] != null ? _this4.getReserved("hmtx") : _this4.h["hmtx"],maxpData,hheaData);
		var _this5 = this.tablesHash;
		var cmapData = this.readCmapTable(__map_reserved["cmap"] != null ? _this5.getReserved("cmap") : _this5.h["cmap"]);
		var _this6 = this.tablesHash;
		var glyfData = this.readGlyfTable(__map_reserved["glyf"] != null ? _this6.getReserved("glyf") : _this6.h["glyf"],maxpData,locaData,cmapData,hmtxData);
		var _this7 = this.tablesHash;
		var kernData = this.readKernTable(__map_reserved["kern"] != null ? _this7.getReserved("kern") : _this7.h["kern"]);
		var _this8 = this.tablesHash;
		var bytes3 = __map_reserved["OS_2"] != null ? _this8.getReserved("OS_2") : _this8.h["OS_2"];
		if(bytes3 == null) {
			throw new js__$Boot_HaxeError("no maxp table found");
		}
		var i3 = new haxe_io_BytesInput(bytes3);
		i3.set_bigEndian(true);
		var this5 = { version : i3.readUInt16(), xAvgCharWidth : i3.readInt16(), usWeightClass : i3.readUInt16(), usWidthClass : i3.readUInt16(), fsType : i3.readInt16(), ySubscriptXSize : i3.readInt16(), ySubscriptYSize : i3.readInt16(), ySubscriptXOffset : i3.readInt16(), ySubscriptYOffset : i3.readInt16(), ySuperscriptXSize : i3.readInt16(), ySuperscriptYSize : i3.readInt16(), ySuperscriptXOffset : i3.readInt16(), ySuperscriptYOffset : i3.readInt16(), yStrikeoutSize : i3.readInt16(), yStrikeoutPosition : i3.readInt16(), sFamilyClass : i3.readInt16(), bFamilyType : i3.readByte(), bSerifStyle : i3.readByte(), bWeight : i3.readByte(), bProportion : i3.readByte(), bContrast : i3.readByte(), bStrokeVariation : i3.readByte(), bArmStyle : i3.readByte(), bLetterform : i3.readByte(), bMidline : i3.readByte(), bXHeight : i3.readByte(), ulUnicodeRange1 : i3.readInt32(), ulUnicodeRange2 : i3.readInt32(), ulUnicodeRange3 : i3.readInt32(), ulUnicodeRange4 : i3.readInt32(), achVendorID : i3.readInt32(), fsSelection : i3.readInt16(), usFirstCharIndex : i3.readUInt16(), usLastCharIndex : i3.readUInt16(), sTypoAscender : i3.readInt16(), sTypoDescender : i3.readInt16(), sTypoLineGap : i3.readInt16(), usWinAscent : i3.readUInt16(), usWinDescent : i3.readUInt16()};
		var os2Data = this5;
		var _this9 = this.tablesHash;
		var nameData = this.readNameTable(__map_reserved["_name"] != null ? _this9.getReserved("_name") : _this9.h["_name"]);
		var tables = [format_ttf_Table.THhea(hheaData),format_ttf_Table.THead(headData),format_ttf_Table.TMaxp(maxpData),format_ttf_Table.TLoca(locaData),format_ttf_Table.THmtx(hmtxData),format_ttf_Table.TCmap(cmapData),format_ttf_Table.TGlyf(glyfData),format_ttf_Table.TKern(kernData),format_ttf_Table.TOS2(os2Data),format_ttf_Table.TName(nameData)];
		return { header : header, directory : directory, tables : tables};
	}
	,readDirectory: function(header) {
		this.tablesHash = new haxe_ds_StringMap();
		var directory = [];
		var _g = 0;
		var _g1 = header.numTables;
		while(_g < _g1) {
			var i = _g++;
			var tableId = this.input.readInt32();
			var bytesOutput = new haxe_io_BytesOutput();
			bytesOutput.set_bigEndian(true);
			bytesOutput.writeInt32(tableId);
			var bytesName = bytesOutput.getBytes();
			var tableName = new haxe_io_BytesInput(bytesName).readString(4);
			if(tableName == "name") {
				tableName = "_name";
			}
			directory[i] = { tableId : tableId, tableName : tableName, checksum : this.input.readInt32(), offset : this.input.readInt32(), length : this.input.readInt32()};
		}
		directory.sort($bind(this,this.sortOnOffset32));
		var _g2 = 0;
		var _g3 = directory.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var entry = directory[i1];
			var start = entry.offset;
			var end;
			if(i1 == directory.length - 1) {
				end = start + entry.length | 0;
			} else {
				end = directory[i1 + 1].offset;
			}
			var bytes = this.input.read(end - start | 0);
			var _this = this.tablesHash;
			var key = entry.tableName.split("/").join("_");
			if(__map_reserved[key] != null) {
				_this.setReserved(key,bytes);
			} else {
				_this.h[key] = bytes;
			}
		}
		return directory;
	}
	,sortOnOffset32: function(e1,e2) {
		var x = e1.offset;
		var y = e2.offset;
		var result = 0;
		if(x < y) {
			result = -1;
		}
		if(x == y) {
			result = 0;
		}
		if(x > y) {
			result = 1;
		}
		return result;
	}
	,sortOnOffset16: function(e1,e2) {
		var x = e1.offset;
		var y = e2.offset;
		var result = 0;
		if(x < y) {
			result = -1;
		}
		if(x == y) {
			result = 0;
		}
		if(x > y) {
			result = 1;
		}
		return result;
	}
	,readLocaTable: function(bytes,head,maxp) {
		if(bytes == null) {
			throw new js__$Boot_HaxeError("no loca table found");
		}
		var input = new haxe_io_BytesInput(bytes);
		input.set_bigEndian(true);
		var offsets = [];
		if(head.indexToLocFormat == 0) {
			var _g = 0;
			var _g1 = maxp.numGlyphs + 1;
			while(_g < _g1) {
				var i = _g++;
				offsets[i] = input.readUInt16() * 2;
			}
		} else {
			var _g2 = 0;
			var _g11 = maxp.numGlyphs + 1;
			while(_g2 < _g11) {
				var i1 = _g2++;
				offsets[i1] = input.readInt32();
			}
		}
		return { factor : head.indexToLocFormat == 0 ? 2 : 1, offsets : offsets};
	}
	,readHmtxTable: function(bytes,maxp,hhea) {
		if(bytes == null) {
			throw new js__$Boot_HaxeError("no hmtx table found");
		}
		var input = new haxe_io_BytesInput(bytes);
		input.set_bigEndian(true);
		var metrics = [];
		var _g = 0;
		var _g1 = hhea.numberOfHMetrics;
		while(_g < _g1) {
			var i = _g++;
			metrics.push({ advanceWidth : input.readUInt16(), leftSideBearing : input.readInt16()});
		}
		var len = maxp.numGlyphs - hhea.numberOfHMetrics;
		var lastAdvanceWidth = metrics[metrics.length - 1].advanceWidth;
		var _g2 = 0;
		var _g3 = len;
		while(_g2 < _g3) {
			var i1 = _g2++;
			metrics.push({ advanceWidth : lastAdvanceWidth, leftSideBearing : input.readInt16()});
		}
		return metrics;
	}
	,readGlyfTable: function(bytes,maxp,loca,cmap,hmtx) {
		if(bytes == null) {
			throw new js__$Boot_HaxeError("no glyf table found");
		}
		var input = new haxe_io_BytesInput(bytes);
		input.set_bigEndian(true);
		var descriptions = [];
		var _g = 0;
		var _g1 = maxp.numGlyphs;
		while(_g < _g1) {
			var i = _g++;
			descriptions.push(this.readGlyf(i,input,loca.offsets[i + 1] - loca.offsets[i]));
		}
		return descriptions;
	}
	,readGlyf: function(glyphIndex,input,len) {
		if(len > 0) {
			var numberOfContours = input.readInt16();
			var glyphHeader = { numberOfContours : numberOfContours, xMin : input.readInt16(), yMin : input.readInt16(), xMax : input.readInt16(), yMax : input.readInt16()};
			len -= 10;
			if(numberOfContours >= 0) {
				return format_ttf_GlyfDescription.TGlyphSimple(glyphHeader,this.readGlyfSimple(numberOfContours,input,len));
			} else if(numberOfContours == -1) {
				return format_ttf_GlyfDescription.TGlyphComposite(glyphHeader,this.readGlyfComposite(input,len,glyphIndex));
			} else {
				throw new js__$Boot_HaxeError("unknown GlyfDescription");
			}
		} else {
			return format_ttf_GlyfDescription.TGlyphNull;
		}
	}
	,readGlyfSimple: function(numberOfContours,input,len) {
		var endPtsOfContours = [];
		var _g = 0;
		var _g1 = numberOfContours;
		while(_g < _g1) {
			var i = _g++;
			endPtsOfContours[i] = input.readUInt16();
			len -= 2;
		}
		var count = endPtsOfContours[numberOfContours - 1] + 1;
		var instructionLength = input.readUInt16();
		len -= 2;
		var instructions = [];
		var _g2 = 0;
		var _g3 = instructionLength;
		while(_g2 < _g3) {
			var i1 = _g2++;
			instructions[i1] = input.readByte();
			--len;
		}
		var flags = [];
		var iindex = 0;
		var jindex = 1;
		while(true) if(iindex < count) {
			flags[iindex] = input.readByte();
			--len;
			if((flags[iindex] & 8) != 0) {
				var repeats = input.readByte();
				--len;
				jindex = 1;
				while(true) if(jindex < repeats + 1) {
					flags[iindex + jindex] = flags[iindex];
					++jindex;
				} else {
					break;
				}
				iindex += repeats;
			}
			++iindex;
		} else {
			break;
		}
		var xCoordinates = [];
		var yCoordinates = [];
		var x = 0;
		var y = 0;
		var _g4 = 0;
		var _g5 = count;
		while(_g4 < _g5) {
			var i2 = _g4++;
			if((flags[i2] & 16) != 0) {
				if((flags[i2] & 2) != 0) {
					x += input.readByte();
					--len;
				}
			} else if((flags[i2] & 2) != 0) {
				x += -input.readByte();
				--len;
			} else {
				x += input.readInt16();
				len -= 2;
			}
			xCoordinates[i2] = x;
		}
		var _g6 = 0;
		var _g7 = count;
		while(_g6 < _g7) {
			var i3 = _g6++;
			if((flags[i3] & 32) != 0) {
				if((flags[i3] & 4) != 0) {
					y += input.readByte();
					--len;
				}
			} else if((flags[i3] & 4) != 0) {
				y += -input.readByte();
				--len;
			} else {
				y += input.readInt16();
				len -= 2;
			}
			yCoordinates[i3] = y;
		}
		var glyphSimple = { endPtsOfContours : endPtsOfContours, flags : flags, instructions : instructions, xCoordinates : xCoordinates, yCoordinates : yCoordinates};
		input.read(len);
		return glyphSimple;
	}
	,readGlyfComposite: function(input,len,glyphIndex) {
		var components = [];
		input.read(len);
		return components;
	}
	,readCmapTable: function(bytes) {
		if(bytes == null) {
			throw new js__$Boot_HaxeError("no cmap table found");
		}
		var input = new haxe_io_BytesInput(bytes);
		input.set_bigEndian(true);
		var version = input.readUInt16();
		var numberSubtables = input.readUInt16();
		var directory = [];
		var _g = 0;
		var _g1 = numberSubtables;
		while(_g < _g1) {
			var i = _g++;
			directory.push({ platformId : input.readUInt16(), platformSpecificId : input.readUInt16(), offset : input.readInt32()});
		}
		var subTables = [];
		var _g2 = 0;
		var _g3 = numberSubtables;
		while(_g2 < _g3) {
			var i1 = _g2++;
			subTables.push(this.readSubTable(bytes,directory[i1]));
		}
		return subTables;
	}
	,readSubTable: function(bytes,entry) {
		var input = new haxe_io_BytesInput(bytes);
		input.set_bigEndian(true);
		input.read(entry.offset);
		var cmapFormat = input.readUInt16();
		var length = input.readUInt16();
		var language = input.readUInt16();
		var cmapHeader = { platformId : entry.platformId, platformSpecificId : entry.platformSpecificId, offset : entry.offset, format : cmapFormat, language : language};
		this.glyphIndexArray = [];
		this.allGlyphs = [];
		if(cmapFormat == 0) {
			var _g = 0;
			while(_g < 256) {
				var j = _g++;
				this.glyphIndexArray[j] = { charCode : j, index : input.readByte(), char : format_ttf_MacGlyphNames.names[j]};
			}
			return format_ttf_CmapSubTable.Cmap0(cmapHeader,this.glyphIndexArray);
		} else if(cmapFormat == 4) {
			var segCount = input.readUInt16() / 2;
			var searchRange = input.readUInt16();
			var entrySelector = input.readUInt16();
			var rangeShift = input.readUInt16();
			var endCodes = [];
			var startCodes = [];
			var idDeltas = [];
			var idRangeOffsets = [];
			var glyphIndices = [];
			var _g1 = 0;
			var _g11 = segCount;
			while(_g1 < _g11) {
				var i = _g1++;
				endCodes.push(input.readUInt16());
			}
			input.readUInt16();
			var _g2 = 0;
			var _g3 = segCount;
			while(_g2 < _g3) {
				var i1 = _g2++;
				startCodes.push(input.readUInt16());
			}
			var _g4 = 0;
			var _g5 = segCount;
			while(_g4 < _g5) {
				var i2 = _g4++;
				idDeltas.push(input.readUInt16());
			}
			var _g6 = 0;
			var _g7 = segCount;
			while(_g6 < _g7) {
				var i3 = _g6++;
				idRangeOffsets.push(input.readUInt16());
			}
			var count = (length - (8 * segCount + 16)) / 2 | 0;
			var _g8 = 0;
			var _g9 = count;
			while(_g8 < _g9) {
				var i4 = _g8++;
				glyphIndices[i4] = input.readUInt16();
			}
			this.glyphIndexArray[0] = { charCode : 0, index : 0, char : String.fromCodePoint(0)};
			this.glyphIndexArray[1] = { charCode : 1, index : 1, char : "\x01"};
			this.glyphIndexArray[2] = { charCode : 2, index : 2, char : "\x02"};
			this.allGlyphs.concat(this.glyphIndexArray);
			var _g10 = 0;
			var _g111 = segCount;
			while(_g10 < _g111) {
				var i5 = _g10++;
				var _g101 = startCodes[i5];
				var _g112 = endCodes[i5] + 1;
				while(_g101 < _g112) {
					var j1 = _g101++;
					var index = this.mapCharCode(j1,glyphIndices,segCount,startCodes,endCodes,idRangeOffsets,idDeltas);
					var glyphIndex = { charCode : j1, index : index, char : String.fromCodePoint(j1)};
					this.glyphIndexArray[j1] = glyphIndex;
					this.allGlyphs.push(glyphIndex);
				}
			}
			return format_ttf_CmapSubTable.Cmap4(cmapHeader,this.glyphIndexArray);
		} else if(cmapFormat == 6) {
			var firstCode = input.readUInt16();
			var entryCount = input.readUInt16();
			var _g12 = 0;
			var _g13 = entryCount;
			while(_g12 < _g13) {
				var j2 = _g12++;
				var glyphIndex1 = { charCode : j2, index : input.readUInt16(), char : format_ttf_MacGlyphNames.names[j2]};
				this.glyphIndexArray[j2] = glyphIndex1;
			}
			return format_ttf_CmapSubTable.Cmap6(cmapHeader,this.glyphIndexArray,firstCode);
		} else {
			return format_ttf_CmapSubTable.CmapUnk(cmapHeader,bytes);
		}
	}
	,mapCharCode: function(charCode,glyphIndices,segCount,startCodes,endCodes,idRangeOffsets,idDeltas) {
		try {
			var _g = 0;
			var _g1 = segCount;
			while(_g < _g1) {
				var i = _g++;
				if(endCodes[i] >= charCode) {
					if(startCodes[i] <= charCode) {
						if(idRangeOffsets[i] > 0) {
							var index = idRangeOffsets[i] / 2 + (charCode - startCodes[i]) - (segCount - i) | 0;
							return glyphIndices[index];
						} else {
							var index1 = (idDeltas[i] + charCode) % 65536 | 0;
							return index1;
						}
					} else {
						break;
					}
				}
			}
			return 0;
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return 0;
		}
	}
	,getCharCodeFromIndex: function(index) {
		var _g = 0;
		var _g1 = this.glyphIndexArray.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.glyphIndexArray[i] != null && this.glyphIndexArray[i].index == index) {
				return this.glyphIndexArray[i].charCode;
			}
		}
		throw new js__$Boot_HaxeError("charcode not found for index " + index);
	}
	,readKernTable: function(bytes) {
		if(bytes == null) {
			return [];
		}
		var input = new haxe_io_BytesInput(bytes);
		input.set_bigEndian(true);
		var version = input.readUInt16();
		var nTables = input.readUInt16();
		var tables = [];
		var _g = 0;
		var _g1 = nTables;
		while(_g < _g1) {
			var i = _g++;
			var version1 = input.readUInt16();
			var length = input.readUInt16();
			var coverage = input.readUInt16();
			var _format = coverage >> 8;
			switch(_format) {
			case 0:
				var nPairs = input.readUInt16();
				var searchRange = input.readUInt16();
				var entrySelector = input.readUInt16();
				var rangeShift = input.readUInt16();
				this.kerningPairs = [];
				var _g2 = 0;
				var _g11 = nPairs;
				while(_g2 < _g11) {
					var i1 = _g2++;
					this.kerningPairs.push({ left : this.getCharCodeFromIndex(input.readUInt16()), right : this.getCharCodeFromIndex(input.readUInt16()), value : input.readInt16()});
				}
				tables.push(format_ttf_KernSubTable.KernSub0(this.kerningPairs));
				break;
			case 2:
				var rowWidth = input.readUInt16();
				var leftOffsetTable = input.readUInt16();
				var rightOffsetTable = input.readUInt16();
				var array = input.readUInt16();
				var firstGlyph = input.readUInt16();
				var nGlyphs = input.readUInt16();
				var offsets = [];
				var _g3 = 0;
				var _g12 = nGlyphs;
				while(_g3 < _g12) {
					var i2 = _g3++;
					offsets.push(input.readUInt16());
				}
				tables.push(format_ttf_KernSubTable.KernSub1(offsets));
				break;
			}
		}
		return tables;
	}
	,readPostTable: function(bytes) {
		var input = new haxe_io_BytesInput(bytes);
		input.set_bigEndian(true);
		var postData = { version : input.readInt32(), italicAngle : input.readInt32(), underlinePosition : input.readInt16(), underlineThickness : input.readInt16(), isFixedPitch : input.readInt32(), minMemType42 : input.readInt32(), maxMemType42 : input.readInt32(), minMemType1 : input.readInt32(), maxMemType1 : input.readInt32(), numGlyphs : 0, glyphNameIndex : [], psGlyphName : []};
		if(postData.version == 131072) {
			postData.numGlyphs = input.readUInt16();
			var _g = 0;
			var _g1 = postData.numGlyphs;
			while(_g < _g1) {
				var i = _g++;
				postData.glyphNameIndex[i] = input.readUInt16();
			}
			var high = 0;
			var _g2 = 0;
			var _g3 = postData.numGlyphs;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(high < postData.glyphNameIndex[i1]) {
					high = postData.glyphNameIndex[i1];
				}
			}
			if(high > 257) {
				high -= 257;
				var _g4 = 0;
				var _g5 = high;
				while(_g4 < _g5) {
					var i2 = _g4++;
					postData.psGlyphName[i2] = input.readString(input.readByte());
				}
			}
		}
		return postData;
	}
	,readNameTable: function(bytes) {
		var input = new haxe_io_BytesInput(bytes);
		input.set_bigEndian(true);
		var _format = input.readUInt16();
		var count = input.readUInt16();
		var stringOffset = input.readUInt16();
		var nameRecords = [];
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			nameRecords.push({ platformId : input.readUInt16(), platformSpecificId : input.readUInt16(), languageID : input.readUInt16(), nameID : input.readUInt16(), length : input.readUInt16(), offset : input.readUInt16(), record : ""});
		}
		nameRecords.sort($bind(this,this.sortOnOffset16));
		var fontNameRecord = null;
		var _g2 = 0;
		var _g3 = count;
		while(_g2 < _g3) {
			var i1 = _g2++;
			if(nameRecords[i1].nameID == 4 && (nameRecords[i1].platformId == 3 || nameRecords[i1].platformId == 0)) {
				fontNameRecord = nameRecords[i1];
				break;
			}
		}
		if(fontNameRecord == null) {
			throw new js__$Boot_HaxeError("fontNameRecord not found");
		} else {
			input.read(fontNameRecord.offset);
			var _g4 = 0;
			var _g5 = fontNameRecord.length / 2 | 0;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var fontNameRecord1 = fontNameRecord;
				var fontNameRecord2 = fontNameRecord1.record;
				var code = input.readUInt16();
				fontNameRecord1.record = fontNameRecord2 + String.fromCodePoint(code);
			}
		}
		this.fontName = fontNameRecord.record;
		return nameRecords;
	}
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = true;
var haxe_Resource = function() { };
haxe_Resource.__name__ = true;
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
});
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeDouble: function(x) {
		var i64 = haxe_io_FPHelper.doubleToI64(x);
		if(this.bigEndian) {
			this.writeInt32(i64.high);
			this.writeInt32(i64.low);
		} else {
			this.writeInt32(i64.low);
			this.writeInt32(i64.high);
		}
	}
	,writeInt16: function(x) {
		if(x < -32768 || x >= 32768) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		this.writeUInt16(x & 65535);
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
haxe_xml_Printer.__name__ = true;
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input2 = StringTools.trim(commentContent);
			this.output.b += Std.string(input2);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(child1.nodeType));
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var truetype_Glyph2Canvas = function() { };
truetype_Glyph2Canvas.__name__ = true;
truetype_Glyph2Canvas.getGlyphCanvas = function(ttfGlyphs,index,displayScale,translateY,fillColor,drawPoints) {
	if(drawPoints == null) {
		drawPoints = false;
	}
	if(fillColor == null) {
		fillColor = "#00a";
	}
	if(translateY == null) {
		translateY = -1350;
	}
	if(displayScale == null) {
		displayScale = .5;
	}
	var glyph = ttfGlyphs.getGlyphSimple(index);
	if(glyph == null) {
		throw new js__$Boot_HaxeError("Glyph index " + index + " is not of type GlyphSimple");
	}
	var glyphHeader = ttfGlyphs.getGlyphHeader(index);
	var outlines = ttfGlyphs.getGlyphOutlines(index);
	var canvas = window.document.createElement("canvas");
	var scale = 64 / ttfGlyphs.headdata.unitsPerEm * displayScale;
	var canvasWidth = (glyphHeader.xMax + 5) * scale;
	var canvasHeight = (ttfGlyphs.headdata.yMax + 300) * scale;
	canvas.setAttribute("height","" + canvasHeight + "px");
	canvas.setAttribute("width","" + canvasWidth + "px");
	var ctx = canvas.getContext("2d",null);
	ctx.scale(scale,-scale);
	ctx.translate(0,translateY);
	ctx.beginPath();
	var _g = 0;
	while(_g < outlines.length) {
		var outline = outlines[_g];
		++_g;
		var offCurvePoint = null;
		var _g1 = 0;
		var _g11 = outline.length;
		while(_g1 < _g11) {
			var i = _g1++;
			var point = outline[i];
			if(i == 0) {
				ctx.moveTo(point.x,point.y);
			} else {
				var prevPoint = outline[i - 1];
				if(point.c) {
					if(prevPoint.c) {
						ctx.lineTo(point.x,point.y);
					} else {
						ctx.quadraticCurveTo(offCurvePoint.x,offCurvePoint.y,point.x,point.y);
					}
				} else {
					offCurvePoint = outline[i];
				}
			}
		}
	}
	ctx.fillStyle = "#00a";
	ctx.fill();
	if(drawPoints) {
		var _g12 = 0;
		while(_g12 < outlines.length) {
			var outline1 = outlines[_g12];
			++_g12;
			var _g13 = 0;
			while(_g13 < outline1.length) {
				var point1 = outline1[_g13];
				++_g13;
				if(point1 == outline1[0]) {
					ctx.beginPath();
					ctx.fillStyle = "#0000ff";
					ctx.rect(point1.x - 20,point1.y - 20,40,40);
					ctx.fill();
				}
				ctx.beginPath();
				if(point1.c) {
					ctx.fillStyle = "#ff0000";
				} else {
					ctx.fillStyle = "#00ff00";
				}
				ctx.rect(point1.x - 10,point1.y - 10,20,20);
				ctx.fill();
			}
		}
	}
	return canvas;
};
var truetype_Glyph2SVG = function() { };
truetype_Glyph2SVG.__name__ = true;
truetype_Glyph2SVG.getGlyphSvg = function(ttfGlyphs,index,displayScale,translateY,fillColor) {
	if(fillColor == null) {
		fillColor = "#a00";
	}
	if(translateY == null) {
		translateY = -1350;
	}
	if(displayScale == null) {
		displayScale = .5;
	}
	var glyph = ttfGlyphs.getGlyphSimple(index);
	if(glyph == null) {
		throw new js__$Boot_HaxeError("Glyph index " + index + " is not of type GlyphSimple");
	}
	var glyphHeader = ttfGlyphs.getGlyphHeader(index);
	var scale = 64 / ttfGlyphs.headdata.unitsPerEm * displayScale;
	var canvasWidth = (glyphHeader.xMax + 5) * scale;
	var canvasHeight = (ttfGlyphs.headdata.yMax + 300) * scale;
	var outlines = ttfGlyphs.getGlyphOutlines(index);
	var svgPath = [];
	var _g = 0;
	while(_g < outlines.length) {
		var outline = outlines[_g];
		++_g;
		var offCurvePoint = null;
		var _g1 = 0;
		var _g11 = outline.length;
		while(_g1 < _g11) {
			var i = _g1++;
			var point = outline[i];
			if(i == 0) {
				svgPath.push("M " + point.x + " " + point.y);
			} else {
				var prevPoint = outline[i - 1];
				if(point.c) {
					if(prevPoint.c) {
						svgPath.push("L " + point.x + " " + point.y);
					} else {
						svgPath.push("Q " + offCurvePoint.x + " " + offCurvePoint.y + " " + point.x + " " + point.y);
					}
				} else {
					offCurvePoint = outline[i];
				}
			}
		}
	}
	var path = Xml.createElement("path");
	path.set("fill",fillColor);
	path.set("d",svgPath.join(" "));
	var scale1 = 0.064 * displayScale;
	path.set("transform","scale(" + scale1 + ", -" + scale1 + ") translate(0, " + translateY + ")");
	var svg = Xml.createElement("svg");
	svg.set("xmlns","http://www.w3.org/2000/svg");
	svg.set("width",canvasWidth + "px");
	svg.set("height",canvasHeight + "px");
	svg.addChild(path);
	return svg;
};
var truetype_GlyphTools = function() { };
truetype_GlyphTools.__name__ = true;
truetype_GlyphTools.createGlyphMap = function(fromIndex,toIndex,ttfGlyphs) {
	var map = new haxe_ds_IntMap();
	var _g = fromIndex;
	var _g1 = toIndex + 1;
	while(_g < _g1) {
		var index = _g++;
		if(!ttfGlyphs.isGlyphSimple(index)) {
			console.log("src/truetype/GlyphTools.hx:15:","TTF Problem here: This glyph index (" + index + ") does not seem to be of type GlyphSimple...");
			continue;
		}
		var outlines = ttfGlyphs.getGlyphOutlines(index);
		map.h[index] = outlines;
	}
	return map;
};
truetype_GlyphTools.glyphMapToJson = function(map) {
	var indexes = [];
	var index = map.keys();
	while(index.hasNext()) {
		var index1 = index.next();
		indexes.push(index1);
	}
	indexes.sort(Reflect.compare);
	var mapObj = { };
	var _g = 0;
	while(_g < indexes.length) {
		var index2 = indexes[_g];
		++_g;
		mapObj["" + index2] = map.h[index2];
	}
	return JSON.stringify(mapObj);
};
truetype_GlyphTools.glyphMapFromJson = function(jsonString) {
	var mapObj = JSON.parse(jsonString);
	console.log("src/truetype/GlyphTools.hx:40:",mapObj);
	var map = new haxe_ds_IntMap();
	var access = mapObj;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g1 = { value : _g_access[key], key : key};
		var index = _g1.key;
		var outlines = _g1.value;
		map.h[Std.parseInt(index)] = outlines;
	}
	return map;
};
var truetype_TTFGlyphs = function(ttfBytes) {
	var bytesInput = new haxe_io_BytesInput(ttfBytes);
	var ttfReader = new format_ttf_Reader(bytesInput);
	var ttf = ttfReader.read();
	this.buildTables(ttf);
};
truetype_TTFGlyphs.__name__ = true;
truetype_TTFGlyphs.prototype = {
	buildTables: function(ttf) {
		var _g = 0;
		var _g1 = ttf.tables;
		while(_g < _g1.length) {
			var table = _g1[_g];
			++_g;
			switch(table._hx_index) {
			case 0:
				var descriptions = table.descriptions;
				console.log("src/truetype/TTFGlyphs.hx:22:","TGlyf descriptions: " + descriptions.length);
				this.descriptions = descriptions;
				this.length = this.descriptions.length;
				break;
			case 5:
				var headdata = table.data;
				this.headdata = headdata;
				break;
			default:
			}
		}
	}
	,getGlyphSimple: function(index) {
		var description = this.descriptions[index];
		switch(description._hx_index) {
		case 0:
			var data = description.data;
			var h = description.header;
			return data;
		case 1:
			var components = description.components;
			var h1 = description.header;
			throw new js__$Boot_HaxeError("TGlyphComposite " + index);
		case 2:
			console.log("src/truetype/TTFGlyphs.hx:42:","TGlyphNull " + index);
			return null;
		}
	}
	,isGlyphSimple: function(index) {
		return this.getGlyphSimple(index) != null;
	}
	,getGlyphHeader: function(index) {
		var description = this.descriptions[index];
		switch(description._hx_index) {
		case 0:
			var data = description.data;
			var header = description.header;
			return header;
		case 1:
			var components = description.components;
			var header1 = description.header;
			return header1;
		case 2:
			console.log("src/truetype/TTFGlyphs.hx:59:","TGlyphNull " + index);
			return null;
		}
	}
	,getGlyphOutlines: function(index) {
		var simple = this.getGlyphSimple(index);
		var points = [];
		var _g = 0;
		var _g1 = simple.flags.length;
		while(_g < _g1) {
			var i = _g++;
			var onCurve = simple.flags[i] % 2 != 0;
			var point = { c : onCurve, x : simple.xCoordinates[i], y : simple.yCoordinates[i]};
			points.push(point);
		}
		var p = 0;
		var c = 0;
		var first = 1;
		var outline = [];
		var outlines = [];
		while(p < points.length) {
			var point1 = points[p];
			if(first == 1) {
				first = 0;
			}
			outline.push(point1);
			if(p == simple.endPtsOfContours[c]) {
				++c;
				first = 1;
				outlines.push(outline.slice());
				outline = [];
			}
			++p;
		}
		this.adjustOutlines(outlines);
		return outlines;
	}
	,adjustOutlines: function(outlines) {
		var hasOnCurve = function(outline) {
			var _g = [];
			var _g1 = 0;
			var _g2 = outline;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(v.c == true) {
					_g.push(v);
				}
			}
			return _g.length > 0;
		};
		var shiftPoints = function(outline1) {
			var first = outline1[0];
			while(first.c == false) {
				outline1.push(outline1.shift());
				first = outline1[0];
			}
		};
		var addControlPointOnCurve = function(outline2) {
			var p0 = outline2[0];
			var p1 = outline2[outline2.length - 1];
			var newX = (p1.x - p0.x) / 2 + p0.x;
			var newY = (p1.y - p0.y) / 2 + p0.y;
			var newPoint = { x : newX, y : newY, c : true};
			outline2.unshift(newPoint);
		};
		var _g3 = 0;
		while(_g3 < outlines.length) {
			var outline3 = outlines[_g3];
			++_g3;
			if(hasOnCurve(outline3)) {
				shiftPoints(outline3);
			} else {
				addControlPointOnCurve(outline3);
			}
		}
		var _g11 = 0;
		while(_g11 < outlines.length) {
			var outline4 = outlines[_g11];
			++_g11;
			var newOutline = [];
			var _g12 = 0;
			var _g21 = outline4.length;
			while(_g12 < _g21) {
				var i = _g12++;
				var point = outline4[i];
				newOutline.push(point);
				if(i > 0) {
					var prevPoint = outline4[i - 1];
					if(point.c == false && prevPoint.c == false) {
						var newX1 = (point.x - prevPoint.x) / 2 + prevPoint.x;
						var newY1 = (point.y - prevPoint.y) / 2 + prevPoint.y;
						var newPoint1 = { x : newX1, y : newY1, c : true};
						newOutline.splice(newOutline.length - 1,0,newPoint1);
					}
				}
			}
			newOutline.push(newOutline[0]);
			outlines[outlines.indexOf(outline4)] = newOutline;
		}
	}
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
haxe_Resource.content = [{ name : "font", data : ""}];
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Xml.Element = 0;
Xml.Document = 6;
format_ttf_TableId.BASE = 1111577413;
format_ttf_TableId.CFF = 1128678944;
format_ttf_TableId.DSIG = 1146308935;
format_ttf_TableId.EBDT = 1161970772;
format_ttf_TableId.EBLC = 1161972803;
format_ttf_TableId.EBSC = 1161974595;
format_ttf_TableId.GDEF = 1195656518;
format_ttf_TableId.GPOS = 1196445523;
format_ttf_TableId.GSUB = 1196643650;
format_ttf_TableId.JSTF = 1246975046;
format_ttf_TableId.LTSH = 1280594760;
format_ttf_TableId.MMFX = 1296909912;
format_ttf_TableId.MMSD = 1296913220;
format_ttf_TableId.OS_2 = 1330851634;
format_ttf_TableId.PCLT = 1346587732;
format_ttf_TableId.VDMX = 1447316824;
format_ttf_TableId.cmap = 1668112752;
format_ttf_TableId.cvt = 1668707360;
format_ttf_TableId.fpgm = 1718642541;
format_ttf_TableId.fvar = 1719034226;
format_ttf_TableId.gasp = 1734439792;
format_ttf_TableId.glyf = 1735162214;
format_ttf_TableId.hdmx = 1751412088;
format_ttf_TableId.head = 1751474532;
format_ttf_TableId.hhea = 1751672161;
format_ttf_TableId.hmtx = 1752003704;
format_ttf_TableId.kern = 1801810542;
format_ttf_TableId.loca = 1819239265;
format_ttf_TableId.maxp = 1835104368;
format_ttf_TableId._name = 1851878757;
format_ttf_TableId.prep = 1886545264;
format_ttf_TableId.post = 1886352244;
format_ttf_TableId.vhea = 1986553185;
format_ttf_TableId.vmtx = 1986884728;
format_ttf_CFlag.ARG_1_AND_2_ARE_WORDS = 1;
format_ttf_CFlag.ARGS_ARE_XY_VALUES = 2;
format_ttf_CFlag.ROUND_XY_TO_GRID = 4;
format_ttf_CFlag.WE_HAVE_A_SCALE = 8;
format_ttf_CFlag.MORE_COMPONENTS = 32;
format_ttf_CFlag.WE_HAVE_AN_X_AND_Y_SCALE = 64;
format_ttf_CFlag.WE_HAVE_A_TWO_BY_TWO = 128;
format_ttf_CFlag.WE_HAVE_INSTRUCTIONS = 256;
format_ttf_CFlag.USE_MY_METRICS = 512;
format_ttf_MacGlyphNames.names = [".notdef","quotesingle","zero","semicolon","G","V","grave","o","braceright","Udieresis","egrave","oacute","udieresis","registered","infinity","product","exclamdown","guillemotright","emdash","Ydieresis","middot","Edieresis","Ograve","breve","Scaron","thorn","threequarters"];
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
Example.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
